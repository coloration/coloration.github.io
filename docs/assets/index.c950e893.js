import{u as s,o as a,b as t,s as p}from"./vendor.2fa548c0.js";const o={class:"mk prose prose-sm m-auto text-left"},e=p(`<nav class="table-of-contents"><ol><li><a href="#startup">Startup</a><ol><li><a href="#install">Install</a></li><li><a href="#simple-usage">Simple Usage</a></li><li><a href="#instance-usage">Instance Usage</a></li></ol></li><li><a href="#methods-usage">Methods Usage</a><ol><li><a href="#normal">Normal</a></li><li><a href="#jsonp">JSONP</a></li><li><a href="#batch-requests">Batch Requests</a></li></ol></li><li><a href="#features">Features</a><ol><li><a href="#custom-adapter-%26-mock">Custom Adapter &amp; Mock</a></li><li><a href="#cache-responses-for-getlike-methods">Cache responses for Getlike methods</a></li><li><a href="#post-type">Post Type</a></li><li><a href="#cancel-request">Cancel Request</a></li><li><a href="#timeout">Timeout</a></li><li><a href="#unified-catcher">Unified Catcher</a></li></ol></li><li><a href="#documents">Documents</a><ol><li><a href="#methods">methods</a></li><li><a href="#helper">Helper</a><ol><li><a href="#query2object">query2Object</a></li><li><a href="#object2query">object2Query</a></li><li><a href="#splitblob">splitBlob</a></li></ol></li><li><a href="#http-status-code">HTTP Status Code</a></li><li><a href="#conf">Conf</a></li><li><a href="#change-log">Change Log</a></li></ol></li></ol></nav><h1 id="%40coloration%2Fasker" tabindex="-1">@coloration/asker</h1><ul><li>Github: <a href="https://github.com/coloration/asker" target="_blank" rel="noopener">https://github.com/coloration/asker</a></li><li>Living Document: <a href="https://binyu.me/coloration/asker" target="_blank" rel="noopener">https://binyu.me/coloration/asker</a></li><li>Github Document Page: <a href="https://github.com/coloration/asker/blob/master/DOCUMENT.md" target="_blank" rel="noopener">https://github.com/coloration/asker/blob/master/DOCUMENT.md</a></li></ul><p style="display:flex;"><img style="margin-right:6px;" src="https://img.shields.io/npm/v/@coloration/asker.svg" alt="version"><img style="margin-right:6px;" src="https://img.shields.io/npm/l/@coloration/asker.svg" alt="lic"><img style="margin-right:6px;" src="https://img.shields.io/npm/dm/@coloration/asker.svg" alt="Download"><img style="margin-right:6px;" src="https://img.shields.io/bundlephobia/min/@coloration/asker@0.9.0" alt="min"><img style="margin-right:6px;" src="https://img.shields.io/bundlephobia/minzip/@coloration/asker@0.9.0" alt="minzip"></p><h2 id="startup" tabindex="-1">Startup</h2><h3 id="install" tabindex="-1">Install</h3><blockquote><p>HTML</p></blockquote><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://raw.githubusercontent.com/coloration/asker/master/dist/index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">var</span> Asker <span class="token operator">=</span> asker<span class="token punctuation">.</span>Asker
Asker<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://api.io\`&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><blockquote><p>Node Project</p></blockquote><pre class="language-bash"><code class="language-bash">$ <span class="token function">yarn</span> <span class="token function">add</span> @coloration/asker -S
<span class="token comment"># or</span>
$ <span class="token function">npm</span> i @coloration/asker -S
</code></pre><h3 id="simple-usage" tabindex="-1">Simple Usage</h3><blockquote><p>JavaScript</p></blockquote><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Asker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@coloration/asker&#39;</span>

Asker<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://api.io/list&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><blockquote><p>TypeScript</p></blockquote><pre class="language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> Asker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@coloration/asker&#39;</span>

<span class="token keyword">type</span> <span class="token class-name">FooDto</span> <span class="token punctuation">{</span>
  page<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> limit<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> offset<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

Asker<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>FooDto<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;http://api.io/list&#39;</span> <span class="token punctuation">{</span> page<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><h3 id="instance-usage" tabindex="-1">Instance Usage</h3><p>You can initialize to cache some configure</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Asker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@coloration/asker&#39;</span>

<span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Asker</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">&#39;http://api.io&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

api<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/list&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
api<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/article&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;a article&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;write ...&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><p><a href="#conf">detail of configure on above</a></p><h2 id="methods-usage" tabindex="-1">Methods Usage</h2><h3 id="normal" tabindex="-1">Normal</h3><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Asker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@coloration/asker&#39;</span>

Asker<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://api.io&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
Asker<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>
  <span class="token string">&#39;http:/api.io/article&#39;</span><span class="token punctuation">,</span> 
  <span class="token punctuation">{</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;write ...&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> 
    <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token string">&#39;title=article&#39;</span> 
    <span class="token comment">// or</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;article&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><p>all methods:</p><p>post like: <code>post</code> <code>patch</code> <code>put</code></p><p>get like: <code>get</code> <code>delete</code> <code>options</code> <code>head</code></p><h3 id="jsonp" tabindex="-1">JSONP</h3><p>the <code>jsonp</code> field get from backend developer or document of the origin server. JSONP is a outdate way to handle the across origin.</p><pre class="language-js"><code class="language-js">Asker<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span>
  <span class="token string">&#39;http://api.io/jsonp&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">jsonp</span><span class="token operator">:</span> <span class="token string">&#39;jsoncallback&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token comment">// or change callback name in 2rd parameter </span>
Asker<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span>
  <span class="token string">&#39;http://api.io/jsop?page=1&amp;size=20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jsoncallback&#39;</span>
<span class="token punctuation">)</span>
</code></pre><h3 id="batch-requests" tabindex="-1">Batch Requests</h3><pre class="language-js"><code class="language-js">Asker<span class="token punctuation">.</span><span class="token function">batch</span><span class="token punctuation">(</span>
  <span class="token string">&#39;http://api.io/upload&#39;</span><span class="token punctuation">,</span> 
  <span class="token comment">// an array or a normal param</span>
  <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">file</span><span class="token operator">:</span> file1 <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">file</span><span class="token operator">:</span> file2 <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
  <span class="token punctuation">{</span> 
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// max number of batchs in same tile, default is the array length</span>
    <span class="token literal-property property">slice</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token comment">// retry times of a batch when request failure, default is 0 times</span>
    <span class="token literal-property property">retry</span><span class="token operator">:</span> <span class="token number">2</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token comment">// apply the Promise.all for these requests</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">allResponses</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><h2 id="features" tabindex="-1">Features</h2><blockquote><p>some differences from other request tool</p></blockquote><h3 id="custom-adapter-%26-mock" tabindex="-1">Custom Adapter &amp; Mock</h3><p>The <code>jsonp</code> and <code>batch</code> methods are implemented by <code>adpater</code>. You also could implement some other methods. Other platforms, for example, miniprogram, the enviorment support JavaScript, but not support <code>XMLHTTPRequest</code>.</p><pre class="language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">get</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> conf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Asker<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">adapter</span> <span class="token punctuation">(</span><span class="token parameter">conf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
      <span class="token keyword">return</span> wx<span class="token punctuation">.</span><span class="token function">http</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><p><strong>Uniapp Request Example</strong></p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Asker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@coloration/asker&#39;</span>

<span class="token keyword">function</span> <span class="token function">uniappRequestAdapter</span> <span class="token punctuation">(</span><span class="token parameter">conf<span class="token punctuation">,</span> defRes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    uni<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> conf<span class="token punctuation">.</span>uri<span class="token punctuation">,</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> conf<span class="token punctuation">.</span>body<span class="token punctuation">,</span>
      <span class="token function">success</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        defRes<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> response<span class="token punctuation">.</span>statusCode
        defRes<span class="token punctuation">.</span>data <span class="token operator">=</span> response<span class="token punctuation">.</span>data

        response<span class="token punctuation">.</span>statusCode <span class="token operator">===</span> <span class="token number">200</span> <span class="token operator">?</span> <span class="token function">resolve</span><span class="token punctuation">(</span>defRes<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">reject</span><span class="token punctuation">(</span>defRes<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">fail</span><span class="token operator">:</span> reject
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// demo 1</span>
<span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Asker</span><span class="token punctuation">(</span><span class="token punctuation">{</span> 
  <span class="token literal-property property">adapter</span><span class="token operator">:</span> uniappRequestAdapter
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// demo 2: WARN!: global override</span>
Asker<span class="token punctuation">.</span>adapter <span class="token operator">=</span> uniappRequestAdapter
<span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Asker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><p>You are mocking when you return a data in the <code>adapter</code> function instead of the promise. You could also pass a normal data to <code>adapter</code>.</p><pre class="language-js"><code class="language-js">Asker<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;whatever string&#39;</span><span class="token punctuation">,</span> whateverParam<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">adapter</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3]</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="cache-responses-for-getlike-methods" tabindex="-1">Cache responses for Getlike methods</h3><p>When we spec <code>getCache : true</code> in configure\uFF0CAsker hold the response in <code>Asker.cache</code> object with the url and query until you reload the browser.</p><p>When we send requests with the same url, params and getCache configure field, Asker will find from the <code>Asker.cache</code> firstly. Inexsitly, will request.</p><p>Note: the response will be save after <code>after</code> pipe. so you don\u2019t need format it every time.</p><pre class="language-js"><code class="language-js"><span class="token comment">// request</span>
Asker<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://api.io/config&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">getCache</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// find response from cache</span>
  <span class="token keyword">return</span> Asker<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://api.io/config&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">getCache</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// request</span>
Asker<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://api.io/config&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">getCache</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> 


</code></pre><p>from <code>0.9.0</code> you could spec <code>getCache</code> with a number. the respose will be hold number seconds.</p><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">cacheFetch</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Asker<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://api.io/config&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> 
    <span class="token literal-property property">getCache</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">adapter</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
  <span class="token punctuation">}</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>

<span class="token function">cacheFetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* 0.540440389323092  */</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">cacheFetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* 0.540440389323092  */</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">cacheFetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* 0.8885207860889037  */</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3001</span><span class="token punctuation">)</span>
</code></pre><h3 id="post-type" tabindex="-1">Post Type</h3><p>Asker will transform the body type when you set the postType field. Default is <code>json</code></p><pre class="language-js"><code class="language-js">Asker<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>
  <span class="token string">&#39;http://api.io/upload&#39;</span><span class="token punctuation">,</span> 
  <span class="token punctuation">{</span> <span class="token literal-property property">file</span><span class="token operator">:</span> file<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;photoname&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">postType</span><span class="token operator">:</span> <span class="token string">&#39;form-data&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><h3 id="cancel-request" tabindex="-1">Cancel Request</h3><p>after called the cancel methods, we will receive an error in promise.catch or conf.onAbort method.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Asker<span class="token punctuation">,</span> Canceler <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@coloration/asker&#39;</span>

<span class="token keyword">const</span> canceler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Canceler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

Asker<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://api.io/eg1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> canceler <span class="token punctuation">}</span><span class="token punctuation">)</span>
Asker<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://api.io/eg2&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> canceler <span class="token punctuation">}</span><span class="token punctuation">)</span>

canceler<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><h3 id="timeout" tabindex="-1">Timeout</h3><p>if response timeout, we will receive an error in <code>promise.catch</code> or <code>conf.onTimeout</code> method.</p><pre class="language-js"><code class="language-js">Asker<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://api.io/test-timeout&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> 
  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onTimeout</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> xhr<span class="token punctuation">,</span> conf</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

Asker<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://api.io/test-timeout2&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">3000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> status<span class="token punctuation">,</span> message <span class="token punctuation">}</span> <span class="token operator">=</span> error

  status <span class="token operator">===</span> <span class="token number">0</span>
  message <span class="token operator">===</span> Asker<span class="token punctuation">.</span>errorType<span class="token punctuation">.</span><span class="token constant">TIMEOUT</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><h3 id="unified-catcher" tabindex="-1">Unified Catcher</h3><p>from <code>1.1.0</code></p><p>we can set a unified function to handle error.</p><pre class="language-ts"><code class="language-ts">
</code></pre><h2 id="documents" tabindex="-1">Documents</h2><h3 id="methods" tabindex="-1">methods</h3><ul><li><p>get: <code>&lt;T = any&gt;(url: string, params?: any, conf?: AskerConf) =&gt; Promise&lt;T&gt;</code></p></li><li><p>delete: <code>&lt;T = any&gt;(url: string, params?: any, conf?: AskerConf) =&gt; Promise&lt;T&gt;</code></p></li><li><p>head: <code>&lt;T = any&gt;(url: string, params?: any, conf?: AskerConf) =&gt; Promise&lt;T&gt;</code></p></li><li><p>option: <code>&lt;T = any&gt;(url: string, params?: any, conf?: AskerConf) =&gt; Promise&lt;T&gt;</code></p></li><li><p>post: <code>&lt;T = any&gt;(url: string, body?: any, conf?: AskerConf) =&gt; Promise&lt;T&gt;</code></p></li><li><p>put: <code>&lt;T = any&gt;(url: string, body?: any, conf?: AskerConf) =&gt; Promise&lt;T&gt;</code></p></li><li><p>patch: <code>&lt;T = any&gt;(url: string, body?: any, conf?: AskerConf) =&gt; Promise&lt;T&gt;</code></p></li><li><p>jsonp: <code>AskerJsonpConf</code> extends <code>AskerConf</code>. an addition option is <code>jsonp</code>. It\u2019s will be specitied with callback function name. like <code>callName</code></p><ul><li><code>&lt;T = any&gt;(url?: string, params?: any, conf?: AskerJsonpConf): Promise&lt;T&gt;</code></li><li><code>&lt;T = any&gt;(url?: string, callName?: string, conf?: AskerJsonpConf): Promise&lt;T&gt;</code></li></ul></li><li><p>batch: <code>AskerBatchConf</code> extends <code>AskerConf</code>. <code>slice</code> option means, how much requests in one batch will be send. <code>retry</code> option means, how many times to retry when the request fail.</p><ul><li><code>&lt;T = any&gt;(url?: string, paramsOrbody?: any[], conf?: AskerBatchConf): Promise&lt;T&gt;</code></li></ul></li></ul><h3 id="helper" tabindex="-1">Helper</h3><p><code>import {} from &#39;@coloration/asker&#39;</code></p><h4 id="query2object" tabindex="-1">query2Object</h4><p><code>(obj: { [key: string]: any }, encode = false) =&gt; string</code></p><ul><li>format plain object to query string witch like <code>window.location.search</code>. But it does not have <code>?</code> chat.</li><li><code>encode</code>: if spec it <code>true</code>, it will transform every <code>**value**</code> with <code>encodeURIComponent</code>. Default is <code>false</code>.</li></ul><h4 id="object2query" tabindex="-1">object2Query</h4><p><code>&lt;T = any&gt; (query: string, raw = false) =&gt; T</code></p><ul><li>format query string to object. every chat before the first <code>?</code> will be discarded. Included the <code>?</code>.</li><li><code>raw</code>: if spec it <code>true</code>. the <code>**value**</code> will be format with <code>JSON.parse</code>. string number will be number, string boolean will be boolean, and so on.</li></ul><h4 id="splitblob" tabindex="-1">splitBlob</h4><p><code>(fileOrblob: Blob, piece: number): Blob[]</code></p><ul><li>split the file or blob with piece. The function will return one Blob Array. Its\u2019 length is <code>Math.ceil(Blob.size / piece)</code></li></ul><h3 id="http-status-code" tabindex="-1">HTTP Status Code</h3><p>from 0.8.0</p><pre class="language-ts"><code class="language-ts"><span class="token comment">// import { HttpStatus } from &#39;@coloration/asker&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">enum</span> HttpStatus <span class="token punctuation">{</span>
  <span class="token keyword">continue</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>
  switchingProtocols <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">,</span>
  processing <span class="token operator">=</span> <span class="token number">102</span><span class="token punctuation">,</span>
  earlyHints <span class="token operator">=</span> <span class="token number">103</span><span class="token punctuation">,</span>

  ok <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>
  created <span class="token operator">=</span> <span class="token number">201</span><span class="token punctuation">,</span>
  accepted <span class="token operator">=</span> <span class="token number">202</span><span class="token punctuation">,</span>
  nonauthoritativeInformation <span class="token operator">=</span> <span class="token number">203</span><span class="token punctuation">,</span>
  noContent <span class="token operator">=</span> <span class="token number">204</span><span class="token punctuation">,</span>
  resetContent <span class="token operator">=</span> <span class="token number">205</span><span class="token punctuation">,</span>
  partialContent <span class="token operator">=</span> <span class="token number">206</span><span class="token punctuation">,</span>
  multistatus <span class="token operator">=</span> <span class="token number">207</span><span class="token punctuation">,</span>
  alreadyReported <span class="token operator">=</span> <span class="token number">208</span><span class="token punctuation">,</span>
  imUsed <span class="token operator">=</span> <span class="token number">226</span><span class="token punctuation">,</span>

  multipleChoices <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">,</span>
  movedPermanently <span class="token operator">=</span> <span class="token number">301</span><span class="token punctuation">,</span>
  found <span class="token operator">=</span> <span class="token number">302</span><span class="token punctuation">,</span>
  seeOther <span class="token operator">=</span> <span class="token number">303</span><span class="token punctuation">,</span>
  notModified <span class="token operator">=</span> <span class="token number">304</span><span class="token punctuation">,</span>
  useProxy <span class="token operator">=</span> <span class="token number">305</span><span class="token punctuation">,</span>
  switchProxy <span class="token operator">=</span> <span class="token number">306</span><span class="token punctuation">,</span>
  temporaryRedirect <span class="token operator">=</span> <span class="token number">307</span><span class="token punctuation">,</span>
  permanentRedirect <span class="token operator">=</span> <span class="token number">308</span><span class="token punctuation">,</span>

  badRequest <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span>
  unauthorized <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">,</span>
  paymentRequired <span class="token operator">=</span> <span class="token number">402</span><span class="token punctuation">,</span>
  forbidden <span class="token operator">=</span> <span class="token number">403</span><span class="token punctuation">,</span>
  notFound <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">,</span>
  methodNotAllowed <span class="token operator">=</span> <span class="token number">405</span><span class="token punctuation">,</span>
  notAcceptable <span class="token operator">=</span> <span class="token number">406</span><span class="token punctuation">,</span>
  proxyAuthenticationRequired <span class="token operator">=</span> <span class="token number">407</span><span class="token punctuation">,</span>
  requestTimeout <span class="token operator">=</span> <span class="token number">408</span><span class="token punctuation">,</span>
  conflict <span class="token operator">=</span> <span class="token number">409</span><span class="token punctuation">,</span>
  gone <span class="token operator">=</span> <span class="token number">410</span><span class="token punctuation">,</span>
  lengthRequired <span class="token operator">=</span> <span class="token number">411</span><span class="token punctuation">,</span>
  preconditionFailed <span class="token operator">=</span> <span class="token number">412</span><span class="token punctuation">,</span>
  requestEntityTooLarge <span class="token operator">=</span> <span class="token number">413</span><span class="token punctuation">,</span>
  requesturiTooLong <span class="token operator">=</span> <span class="token number">414</span><span class="token punctuation">,</span>
  unsupportedMediaType <span class="token operator">=</span> <span class="token number">415</span><span class="token punctuation">,</span>
  requestedRangeNotSatisfiable <span class="token operator">=</span> <span class="token number">416</span><span class="token punctuation">,</span>
  expectationFailed <span class="token operator">=</span> <span class="token number">417</span><span class="token punctuation">,</span>
  iAmATeapot <span class="token operator">=</span> <span class="token number">418</span><span class="token punctuation">,</span>
  misdirectedRequest <span class="token operator">=</span> <span class="token number">421</span><span class="token punctuation">,</span>
  unprocessableEntity <span class="token operator">=</span> <span class="token number">422</span><span class="token punctuation">,</span>
  locked <span class="token operator">=</span> <span class="token number">423</span><span class="token punctuation">,</span>
  unprocessableEntity <span class="token operator">=</span> <span class="token number">424</span><span class="token punctuation">,</span>
  tooEarly <span class="token operator">=</span> <span class="token number">425</span><span class="token punctuation">,</span>
  upgradeRequired <span class="token operator">=</span> <span class="token number">426</span><span class="token punctuation">,</span>
  preconditionRequired <span class="token operator">=</span> <span class="token number">428</span><span class="token punctuation">,</span>
  tooManyRequests <span class="token operator">=</span> <span class="token number">429</span><span class="token punctuation">,</span>
  requestHeaderFieldsTooLarge <span class="token operator">=</span> <span class="token number">431</span><span class="token punctuation">,</span>
  unavailableForLegalReasons <span class="token operator">=</span> <span class="token number">451</span><span class="token punctuation">,</span>

  internalServerError <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">,</span>
  notImplemented <span class="token operator">=</span> <span class="token number">501</span><span class="token punctuation">,</span>
  badGateway <span class="token operator">=</span> <span class="token number">502</span><span class="token punctuation">,</span>
  serviceUnavailable <span class="token operator">=</span> <span class="token number">503</span><span class="token punctuation">,</span>
  gatewayTimeout <span class="token operator">=</span> <span class="token number">504</span><span class="token punctuation">,</span>
  httpVersionNotSupported <span class="token operator">=</span> <span class="token number">505</span><span class="token punctuation">,</span>
  variantAlsoNegotiates <span class="token operator">=</span> <span class="token number">506</span><span class="token punctuation">,</span>
  insufficientStorage <span class="token operator">=</span> <span class="token number">507</span><span class="token punctuation">,</span>
  loopDetected <span class="token operator">=</span> <span class="token number">508</span><span class="token punctuation">,</span>
  notExtended <span class="token operator">=</span> <span class="token number">510</span><span class="token punctuation">,</span>
  networkAuthenticationRequired <span class="token operator">=</span> <span class="token number">511</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="conf" tabindex="-1">Conf</h3><pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">AskerConf</span> <span class="token punctuation">{</span>
  <span class="token comment">/** a sub url, it will be added after \`baseUrl\` at last */</span>
  url<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  
  <span class="token comment">/** the url first part */</span>
  baseUrl<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  
  <span class="token comment">/** the string result */</span>
  query<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  
  <span class="token comment">/** the transferred object for post  */</span>
  body<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
  
  <span class="token comment">/** if you need to set the query string when you call the post like methods, you could set this  */</span>
  params<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  
  <span class="token comment">/** request method, will be override when you invoke instance[method] */</span>
  method<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;option&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;head&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;post&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;put&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;patch&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;delete&#39;</span><span class="token punctuation">,</span>
  
  <span class="token comment">/** request headers */</span>
  headers<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span>

  <span class="token comment">/** will cache response after first (getLike) request, second will return the cache. 
   * if spec a number. the cache will be hold on \`seconds\`. after it will be delete.
   **/</span>
  getCache<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">number</span>

  <span class="token comment">/** asker will change the data type auto by this */</span>
  postType<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;json&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;form-data&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;text&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;form-urlencoded&#39;</span><span class="token punctuation">,</span>
  
  <span class="token comment">/** */</span>
  responseType<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;arraybuffer&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;blob&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;document&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;json&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;text&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;stream&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">/** */</span>
  errorResponseType<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;json&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span>
  
  <span class="token comment">/** waiting over timeout(MS), asker will call the &#39;onTimeout&#39; or &#39;reject&#39; */</span>
  timeout<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>

  <span class="token comment">/** set \`XMLHTTPRequest\` withCredentials */</span>
  withCredentials<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>

  <span class="token comment">/** custom validator, default is \`status &gt;= 200 &amp;&amp; status &lt; 300\` */</span>
  validator<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>status<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>

  <span class="token comment">/** custom adapter: you can replace default xhr adapter, \`Asker.jsonp\` is implemented by this way\u3002
   * it also can be used in mock, you can pass a data (except \`undefined\`), it will return a response 
   * wrapped by \`AskerResponse\` object. Or you pass a function return a custom data
  */</span>
  adapter<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> defaultResponse<span class="token operator">:</span> AskerResponse<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">|</span> 
    <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>response<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> defaultResponse<span class="token operator">:</span> AskerResponse<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
  <span class="token punctuation">,</span>
  
  <span class="token comment">/** hook chain change the \`AskerConf\` before the request  */</span>
  before<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>conf<span class="token operator">:</span> AskerConf<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> AskerConf <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>conf<span class="token operator">:</span> AskerConf<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> AskerConf<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  
  <span class="token comment">/** hook chain change your resopnse after the request */</span>
  after<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>response<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span>

  <span class="token comment">/** set default catcher */</span>
  catcher<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> HttpStatus<span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> response<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span>

  <span class="token comment">/** called when xhr trigger \`error\` event */</span>
  onError<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>errType<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> xhr<span class="token operator">:</span> XMLHttpRequest<span class="token punctuation">,</span> conf<span class="token operator">:</span> AskerConf<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">,</span>

  <span class="token comment">/** called when xhr trigger \`abort\` event */</span>
  onAbort<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>errType<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> xhr<span class="token operator">:</span> XMLHttpRequest<span class="token punctuation">,</span> conf<span class="token operator">:</span> AskerConf<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">,</span>

  <span class="token comment">/** called when xhr trigger \`timeout\` event */</span>
  onTimeout<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>errType<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> xhr<span class="token operator">:</span> XMLHttpRequest<span class="token punctuation">,</span> conf<span class="token operator">:</span> AskerConf<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">,</span>

  <span class="token comment">/** called when xhr trigger \`upload.progress\` event */</span>
  onUploadProgress<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> ProgressEvent<span class="token punctuation">,</span> xhr<span class="token operator">:</span> XMLHttpRequest<span class="token punctuation">,</span> conf<span class="token operator">:</span> AskerConf<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
  
  <span class="token comment">/** called when xhr trigger \`progress\` event */</span>
  onDownloadProgress<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> ProgressEvent<span class="token punctuation">,</span> xhr<span class="token operator">:</span> XMLHttpRequest<span class="token punctuation">,</span> conf<span class="token operator">:</span> AskerConf<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span>

  <span class="token comment">/** cancellion */</span>
  canceler<span class="token operator">?</span><span class="token operator">:</span> Canceler

  <span class="token comment">/** other custom props */</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="change-log" tabindex="-1">Change Log</h3><p><a href="https://github.com/coloration/asker/blob/master/CHANGELOG.md" target="_blank" rel="noopener">github</a></p>`,80),c=[e],m=[],g={setup(l,{expose:n}){return n({frontmatter:{meta:[]}}),s({meta:[]}),(i,k)=>(a(),t("div",o,c))}};export{g as default,m as meta};
